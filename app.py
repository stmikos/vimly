# -*- coding: utf-8 -*-
"""
Vimly ‚Äî Client Demo Bot (FastAPI + aiogram 3.7+)

–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:
- –ö–≤–∏–∑:
  ‚Ä¢ –≤ –õ–°: WebApp (¬´üß™ –ö–≤–∏–∑ (–≤ Telegram)¬ª) + ¬´üåê –ö–≤–∏–∑ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)¬ª
  ‚Ä¢ –≤ –≥—Ä—É–ø–ø–∞—Ö: ¬´üß™ –ö–≤–∏–∑ (–≤ —á–∞—Ç–µ)¬ª —á–µ—Ä–µ–∑ ForceReply (–æ–±—Ö–æ–¥–∏—Ç privacy)
- –ö–æ–Ω—Ç–∞–∫—Ç—ã: ¬´‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É¬ª
  ‚Ä¢ –≤ –≥—Ä—É–ø–ø–∞—Ö ‚Äî –¥–∏–ø–ª–∏–Ω–∫ –≤ –õ–°, –≤ –õ–° ‚Äî —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
  ‚Ä¢ –∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –≤ N —Å–µ–∫—É–Ω–¥ (ENV ADMIN_DM_COOLDOWN_SEC)
- –ê–¥–º–∏–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ ADMIN_CHAT_ID): —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å—á—ë—Ç—á–∏–∫–∏
- –õ–∏–¥—ã: —Å–Ω–∞—á–∞–ª–∞ —Ö–µ–¥–µ—Ä –≤ –≥—Ä—É–ø–ø—É, –∑–∞—Ç–µ–º –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞; HTTP-fallback /webapp/submit
- –£–±—Ä–∞–Ω ¬´–ë—Ä–∏—Ñ¬ª
"""

import os, logging, re, asyncio, json, html, secrets
from datetime import datetime, timezone, timedelta
from typing import Optional

from fastapi import FastAPI, Request, HTTPException, Response, Body
from fastapi.responses import HTMLResponse, PlainTextResponse, FileResponse
from fastapi.staticfiles import StaticFiles

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, Update,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    ForceReply, FSInputFile,
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ---------- ENV ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

def _norm_base_url(s: str) -> str:
    s = (s or "").strip()
    return s[:-1] if s.endswith("/") else s

def _norm_path(p: str) -> str:
    p = (p or "").strip()
    return p if p.startswith("/") else f"/{p}"

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("Missing BOT_TOKEN env var")

ADMIN_CHAT_ID = int((os.getenv("ADMIN_CHAT_ID") or "0").strip() or "0")

# –õ–∏–¥-—á–∞—Ç: -100‚Ä¶ (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª) –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞
LEADS_RAW = (os.getenv("LEADS_CHAT_ID") or "").strip()
LEADS_THREAD_ID = int((os.getenv("LEADS_THREAD_ID") or "0").strip() or "0")

BASE_URL = _norm_base_url(os.getenv("BASE_URL"))
WEBHOOK_PATH = _norm_path(os.getenv("WEBHOOK_PATH") or "/telegram/webhook/vimly")
WEBHOOK_SECRET = (os.getenv("WEBHOOK_SECRET") or "").strip()
MODE = (os.getenv("MODE") or "webhook").strip().lower()  # webhook | polling

# –ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞ –õ–° –∞–¥–º–∏–Ω—É
ADMIN_DM_COOLDOWN_SEC = int((os.getenv("ADMIN_DM_COOLDOWN_SEC") or "60").strip() or "60")

# ---------- BRAND ----------
BRAND_NAME = (os.getenv("BRAND_NAME") or "Vimly").strip()
BRAND_TAGLINE = (os.getenv("BRAND_TAGLINE") or "–ë–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç").strip()
BRAND_TG = (os.getenv("BRAND_TG") or "@Vimly_bot").strip()
BRAND_SITE = (os.getenv("BRAND_SITE") or "").strip()

# ---------- LOG ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("vimly-webapp-demo")
log.info("Leads target (raw): %r  thread: %s", LEADS_RAW, LEADS_THREAD_ID or "‚Äî")

# ---------- AIOGRAM ----------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------- STORE ----------
class Store:
    accepting = True
    started_at = datetime.now(timezone.utc)
    users = set()  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ /start
    stats = {"starts": 0, "quiz": 0, "orders": 0, "webquiz": 0, "contact_msgs": 0}
Store.promos = {}
Store.gift_claimed = set()
Store.last_admin_dm = {}  # {user_id: datetime_utc}

# ---------- FSM ----------
class Quiz(StatesGroup):
    niche = State()
    goal = State()
    deadline = State()

class Order(StatesGroup):
    contact = State()

class AdminMsg(StatesGroup):
    text = State()

# ---------- HELPERS ----------
def esc(s: Optional[str]) -> str:
    return html.escape(s or "", quote=False)

def header() -> str:
    parts = [f"<b>{esc(BRAND_NAME)}</b>", esc(BRAND_TAGLINE)]
    if BRAND_SITE:
        parts.append(esc(BRAND_SITE))
    return "\n".join(parts)

def ufmt(m: Message) -> str:
    u = m.from_user
    tag = f"@{u.username}" if u.username else f"id={u.id}"
    return esc(f"{u.full_name} ({tag})")

def parse_leads_target(s: str):
    s = (s or "").strip()
    if not s: return None
    if s.startswith("@"): return s
    try: return int(s)
    except ValueError: return None

async def _send_to_leads(text: str) -> bool:
    """–ü–æ—Å—Ç–∏—Ç –≤ –ª–∏–¥-—á–∞—Ç. True ‚Äî –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, False ‚Äî –æ—à–∏–±–∫–∞ (–∞–ª–µ—Ä—Ç –∞–¥–º–∏–Ω—É –≤–Ω—É—Ç—Ä–∏)."""
    target = parse_leads_target(LEADS_RAW)
    if not target:
        log.error("LEADS_CHAT_ID is empty or invalid: %r", LEADS_RAW)
        return False
    try:
        kwargs = {"disable_web_page_preview": True}
        if LEADS_THREAD_ID:
            kwargs["message_thread_id"] = LEADS_THREAD_ID
        msg = await bot.send_message(target, text, **kwargs)
        log.info("Lead ‚Üí chat=%s thread=%s msg_id=%s", LEADS_RAW, LEADS_THREAD_ID or "‚Äî", getattr(msg, "message_id", "‚Äî"))
        return True
    except Exception as e:
        log.warning("notify_leads failed (%r): %s", LEADS_RAW, e)
        if ADMIN_CHAT_ID:
            try:
                await bot.send_message(
                    ADMIN_CHAT_ID,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏–¥-—á–∞—Ç {LEADS_RAW!r}:\n<code>{esc(str(e))}</code>",
                    disable_web_page_preview=True
                )
            except Exception:
                pass
        return False

async def notify_admin(text: str) -> bool:
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text, disable_notification=True, disable_web_page_preview=True)
        except Exception as e:
            log.warning("notify_admin failed: %s", e)
    return await _send_to_leads(text)

def is_admin(user_id: int) -> bool:
    return user_id == ADMIN_CHAT_ID and ADMIN_CHAT_ID != 0

async def safe_edit(c: CallbackQuery, html_text: str, kb: Optional[InlineKeyboardMarkup] = None):
    if kb is None:
        kb = main_kb(is_private=(c.message.chat.type == "private"), is_admin=is_admin(c.from_user.id))
    m = c.message
    try:
        if getattr(m, "content_type", None) in {"photo","video","animation","document","audio","voice","video_note"}:
            await m.edit_caption(caption=html_text, reply_markup=kb)
        else:
            await m.edit_text(html_text, reply_markup=kb)
    except TelegramBadRequest:
        await m.answer(html_text, reply_markup=kb)

def sanitize_phone(s: str) -> Optional[str]:
    digits = re.sub(r"\D+", "", s or "")
    return digits if 7 <= len(digits) <= 15 else None

def gen_promo_for(user_id: int) -> dict:
    suffix = secrets.token_hex(2).upper()
    code = f"VIM-{str(user_id)[-4:]}-{suffix}"
    expires = datetime.now(timezone.utc) + timedelta(hours=72)
    data = {"code": code, "expires_utc": expires.strftime("%Y-%m-%d %H:%M UTC")}
    Store.promos[user_id] = data
    return data

def admin_dm_left(user_id: int) -> int:
    """–°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    ts = Store.last_admin_dm.get(user_id)
    if not ts:
        return 0
    delta = (datetime.now(timezone.utc) - ts).total_seconds()
    left = int(ADMIN_DM_COOLDOWN_SEC - delta)
    return max(0, left)

def admin_dm_mark(user_id: int):
    Store.last_admin_dm[user_id] = datetime.now(timezone.utc)

BOT_USERNAME = ""  # –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—Ç–∞—Ä—Ç–µ

def deep_link(suffix: str) -> str:
    # https://t.me/<bot>?start=<suffix>
    su = (suffix or "").strip().replace(" ", "_")
    return f"https://t.me/{BOT_USERNAME}?start={su}" if BOT_USERNAME else ""

def force_reply_if_needed(chat_type: str, placeholder: str) -> Optional[ForceReply]:
    return ForceReply(selective=True, input_field_placeholder=placeholder) if chat_type != "private" else None

MAX_TG = 3900  # –∑–∞–ø–∞—Å –ø–æ–¥ –ª–∏–º–∏—Ç 4096
def build_lead(kind: str, m: Message, company: str, task: str, contact: str) -> str:
    base = f"üß™ –ó–∞—è–≤–∫–∞ ({kind})\n–û—Ç: {ufmt(m)}\n"
    comp = (company or "").strip()
    tsk  = (task or "").strip()
    cnt  = (contact or "").strip()
    body = (
        f"–ö–æ–º–ø–∞–Ω–∏—è: {esc(comp) or '‚Äî'}\n"
        f"–ó–∞–¥–∞—á–∞: {esc(tsk) or '‚Äî'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(cnt) or '‚Äî'}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    txt = base + body
    if len(txt) <= MAX_TG: return txt

    comp_max = max(150, int((MAX_TG - len(base) - 100) * 0.45))
    tsk_max  = max(150, int((MAX_TG - len(base) - 100) * 0.45))
    def cut(s: str, n: int) -> str:
        s = s.strip()
        return (s[: n-1] + "‚Ä¶") if len(s) > n else s
    comp2 = cut(comp, comp_max)
    tsk2  = cut(tsk,  tsk_max)
    txt2 = base + (
        f"–ö–æ–º–ø–∞–Ω–∏—è: {esc(comp2) or '‚Äî'}\n"
        f"–ó–∞–¥–∞—á–∞: {esc(tsk2) or '‚Äî'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(cnt) or '‚Äî'}\n"
        f"(–æ–±—Ä–µ–∑–∞–Ω–æ)\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    if len(txt2) > MAX_TG:
        tsk2 = cut(tsk2, max(120, tsk_max - (len(txt2) - MAX_TG + 20)))
        txt2 = base + (
            f"–ö–æ–º–ø–∞–Ω–∏—è: {esc(comp2) or '‚Äî'}\n"
            f"–ó–∞–¥–∞—á–∞: {esc(tsk2) or '‚Äî'}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(cnt) or '‚Äî'}\n"
            f"(–æ–±—Ä–µ–∑–∞–Ω–æ)\n"
            f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
        )
    return txt2

async def send_lead_header(kind: str, m: Message) -> bool:
    head = f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ({kind})\n–û—Ç: {ufmt(m)}"
    return await _send_to_leads(head)

# ---------- UI ----------
def main_kb(is_private: bool, is_admin: bool) -> InlineKeyboardMarkup:
    # –ö–≤–∏–∑: WebApp –≤ –õ–° / —á–∞—Ç-–∫–≤–∏–∑ –≤ –≥—Ä—É–ø–ø–∞—Ö + –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π fallback
    webapp_btn = (
        InlineKeyboardButton(
            text="üß™ –ö–≤–∏–∑ (–≤ Telegram)",
            web_app=WebAppInfo(url=f"{BASE_URL}/webapp/quiz/")
        ) if (BASE_URL and is_private) else
        InlineKeyboardButton(text="üß™ –ö–≤–∏–∑ (–≤ —á–∞—Ç–µ)", callback_data="go_quiz")
    )
    browser_btn = InlineKeyboardButton(
        text="üåê –ö–≤–∏–∑ (–≤ –±—Ä–∞—É–∑–µ—Ä–µ)", url=f"{BASE_URL}/webapp/quiz/"
    ) if BASE_URL else None
    row_quiz = [webapp_btn] + ([browser_btn] if browser_btn else [])

    rows = [
        [InlineKeyboardButton(text="üß≠ –ü—Ä–æ—Ü–µ—Å—Å", callback_data="go_process"),
         InlineKeyboardButton(text="üíº –ö–µ–π—Å—ã (–¥–µ–º–æ)", callback_data="go_cases")],
        row_quiz,
        [InlineKeyboardButton(text="üí∏ –ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã", callback_data="go_prices"),
         InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="go_order")],
        [InlineKeyboardButton(text="üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="go_contacts"),
         InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="go_gift")],
        [InlineKeyboardButton(text="‚Üò –°–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="hide_menu")],
    ]
    if is_admin:
        rows.append([InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω", callback_data="admin_open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ---------- HANDLERS ----------
@dp.message(CommandStart())
async def on_start(m: Message, state: FSMContext):
    Store.stats["starts"] += 1
    Store.users.add(m.from_user.id)

    # –¥–∏–ø–ª–∏–Ω–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä
    parts = (m.text or "").split(maxsplit=1)
    arg = parts[1].strip().lower() if len(parts) > 1 else ""

    hero = os.path.join(os.path.dirname(__file__), "assets", "hero.png")
    try:
        await m.answer_photo(FSInputFile(hero), caption=header())
    except Exception:
        await m.answer(header())

    # —Å–ø–µ—Ü-—Ä–µ–∂–∏–º—ã
    if arg == "contact":
        await state.set_state(AdminMsg.text)
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]])
        note = f"(–∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ {ADMIN_DM_COOLDOWN_SEC} —Å–µ–∫)"
        await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É. –ú–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞.\n" + note, reply_markup=kb)
        return

    if arg == "quiz":
        await state.set_state(Quiz.niche)
        kb = ForceReply(selective=True, input_field_placeholder="–ù–∏—à–∞ –∏ –≥–æ—Ä–æ–¥")
        await m.answer("üß™ –ö–≤–∏–∑: –≤–∞—à–∞ –Ω–∏—à–∞ –∏ –≥–æ—Ä–æ–¥? (1/3)", reply_markup=kb)
        return

    await m.answer(
        "–î–µ–º–æ-–±–æ—Ç: –∫–≤–∏–∑, –∫–µ–π—Å—ã, –∑–∞–ø–∏—Å—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id))
    )

@dp.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))

@dp.message(Command("chatid"))
async def cmd_chatid(m: Message):
    await m.answer(f"chat_id: <code>{m.chat.id}</code>")

@dp.message(Command("threadid"))
async def cmd_threadid(m: Message):
    tid = getattr(m, "message_thread_id", None)
    await m.answer(f"thread_id: <code>{tid}</code>")

@dp.channel_post(Command("chatid"))
async def channel_chatid(m: Message):
    await m.answer(f"chat_id: <code>{m.chat.id}</code>")

@dp.channel_post(Command("threadid"))
async def channel_threadid(m: Message):
    tid = getattr(m, "message_thread_id", None)
    await m.answer(f"thread_id: <code>{tid}</code>")

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ª–∏–¥-—á–∞—Ç–∞ ---
@dp.message(Command("check_leads"))
async def check_leads(m: Message):
    target_raw = LEADS_RAW
    def _parse(s: str):
        s = (s or "").strip()
        if not s: return None
        if s.startswith("@"): return s
        try: return int(s)
        except ValueError: return None
    target = _parse(target_raw)
    if not target:
        return await m.answer("LEADS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    try:
        me = await bot.get_me()
        chat = await bot.get_chat(target)
        member = await bot.get_chat_member(chat.id, me.id)
        def g(obj, attr, default="‚Äî"): return getattr(obj, attr, default)
        info = (
            "üìä –õ–∏–¥-—á–∞—Ç –Ω–∞–π–¥–µ–Ω:\n"
            f"‚Ä¢ chat.id: <code>{chat.id}</code>\n"
            f"‚Ä¢ type: {g(chat, 'type')}\n"
            f"‚Ä¢ title: {g(chat, 'title')}\n"
            f"‚Ä¢ is_forum: {g(chat, 'is_forum', False)}\n"
            f"‚Ä¢ –±–æ—Ç –≤ —á–∞—Ç–µ –∫–∞–∫: {g(member, 'status')}\n"
            f"‚Ä¢ can_send_messages: {g(member, 'can_send_messages', '‚Äî')}\n"
            f"‚Ä¢ can_post_messages (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤): {g(member, 'can_post_messages', '‚Äî')}\n"
        )
        await m.answer(info)
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á–∞—Ç {target_raw!r}:\n<code>{e}</code>")

@dp.message(Command("test_leads"))
async def test_leads_cmd(m: Message):
    if not is_admin(m.from_user.id): return
    def _parse(s: str):
        s = (s or "").strip()
        if not s: return None
        if s.startswith("@"): return s
        try: return int(s)
        except ValueError: return None
    target = _parse(LEADS_RAW)
    if not target:
        return await m.answer("LEADS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    try:
        kwargs = {}
        if LEADS_THREAD_ID:
            kwargs["message_thread_id"] = LEADS_THREAD_ID
        await bot.send_message(target, "üîî –¢–µ—Å—Ç –≤ —á–∞—Ç –ª–∏–¥–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", **kwargs)
        await m.answer(f"OK ‚Üí {LEADS_RAW!r} (thread={LEADS_THREAD_ID or '‚Äî'})")
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ {LEADS_RAW!r}:\n<code>{e}</code>")

# --- –ú–µ–Ω—é / –∫–æ–Ω—Ç–µ–Ω—Ç ---
@dp.callback_query(F.data == "hide_menu")
async def cb_hide_menu(c: CallbackQuery):
    try:
        await c.message.edit_reply_markup(reply_markup=None)
    except TelegramBadRequest:
        pass
    try:
        await c.message.edit_text("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å.")
    except TelegramBadRequest:
        await c.message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å.")
    await c.answer()

@dp.callback_query(F.data == "go_menu")
async def cb_menu(c: CallbackQuery):
    await safe_edit(c, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

@dp.callback_query(F.data == "go_process")
async def cb_process(c: CallbackQuery):
    txt = (
        "–ö–∞–∫ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞ 1‚Äì3 –¥–Ω—è:\n"
        "1) <b>–°–æ–∑–≤–æ–Ω 15 –º–∏–Ω—É—Ç</b> ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–ª–∏\n"
        "2) <b>MVP</b> ‚Äî –º–µ–Ω—é + –∫–≤–∏–∑ + –∞–¥–º–∏–Ω-—á–∞—Ç\n"
        "3) <b>–ó–∞–ø—É—Å–∫</b> ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º Sheets/–æ–ø–ª–∞—Ç—É/–∫–∞–Ω–∞–ª\n"
        "4) <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–∞–≤–∫–∏, –æ—Ç—á—ë—Ç—ã"
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_cases")
async def cb_cases(c: CallbackQuery):
    txt = (
        "–ö–µ–π—Å—ã (–¥–µ–º–æ):\n"
        "‚Ä¢ –ë–∞—Ä–±–µ—Ä—à–æ–ø ‚Äî –∑–∞–ø–∏—Å—å –∏ –æ—Ç–∑—ã–≤—ã\n"
        "‚Ä¢ –ü–µ–∫–∞—Ä–Ω—è ‚Äî –∫–≤–∏–∑ + –∫—É–ø–æ–Ω—ã\n"
        "‚Ä¢ –ê–≤—Ç–æ—Ä-–∫–∞–Ω–∞–ª ‚Äî –æ–ø–ª–∞—Ç–∞ ‚Üí –¥–æ—Å—Ç—É–ø\n"
        "‚Ä¢ –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ‚Äî –∞—Ñ–∏—à–∞/RSVP"
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_prices")
async def cb_prices(c: CallbackQuery):
    txt = (
        "<b>–ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã:</b>\n\n"
        "‚Ä¢ <b>Lite</b> ‚Äî 15‚Äì20k ‚ÇΩ\n"
        "‚Ä¢ <b>Standard</b> ‚Äî 25‚Äì45k ‚ÇΩ\n"
        "‚Ä¢ <b>Pro</b> ‚Äî 50‚Äì90k ‚ÇΩ\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3‚Äì10k ‚ÇΩ/–º–µ—Å</i>"
    )
    await safe_edit(c, txt); await c.answer()

# --- –ö–æ–Ω—Ç–∞–∫—Ç—ã + ¬´–Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É¬ª ---
@dp.callback_query(F.data == "go_contacts")
async def cb_contacts(c: CallbackQuery, state: FSMContext):
    # –≤ –≥—Ä—É–ø–ø–∞—Ö ‚Äî –¥–∏–ø–ª–∏–Ω–∫ –≤ –õ–°
    if c.message.chat.type != "private":
        url = deep_link("contact")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–æ–º", url=url)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu")],
        ])
        txt = "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É –≤ –õ–°."
        await safe_edit(c, txt, kb); await c.answer(); return

    # –≤ –õ–° ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu")],
    ])
    note = f"(–∞–Ω—Ç–∏—Å–ø–∞–º: –Ω–µ —á–∞—â–µ {ADMIN_DM_COOLDOWN_SEC} —Å–µ–∫)"
    await safe_edit(c, f"<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.</b>\n{note}", kb)
    await c.message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞. ¬´–û—Ç–º–µ–Ω–∞¬ª ‚Äî –≤—ã–π—Ç–∏.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]])
    )
    await state.set_state(AdminMsg.text)
    await c.answer()

@dp.callback_query(F.data == "admin_open")
async def cb_admin_open(c: CallbackQuery):
    if not is_admin(c.from_user.id):
        await c.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞", show_alert=True); return
    uptime = datetime.now(timezone.utc) - Store.started_at
    txt = (
        "<b>üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
        f"Uptime: {str(uptime).split('.',1)[0]}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(Store.users)}</b>\n"
        f"Starts: {Store.stats['starts']}\n"
        f"WebQuiz: {Store.stats['webquiz']}\n"
        f"ChatQuiz: {Store.stats['quiz']}\n"
        f"Orders: {Store.stats['orders']}\n"
        f"Msgs‚ÜíAdmin: {Store.stats['contact_msgs']}\n"
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_open")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu")]
    ])
    await safe_edit(c, txt, kb); await c.answer()

# --- –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (FSM) ---
@dp.message(AdminMsg.text, F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def contact_cancel(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))

@dp.message(AdminMsg.text, F.text)
async def contact_text(m: Message, state: FSMContext):
    # –∞–Ω—Ç–∏—Å–ø–∞–º
    left = admin_dm_left(m.from_user.id)
    if left > 0:
        await m.answer(f"–ê–Ω—Ç–∏—Å–ø–∞–º: –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {left} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω—É üôÇ")
        return
    Store.stats["contact_msgs"] += 1
    if ADMIN_CHAT_ID:
        txt = f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç {ufmt(m)}:\n\n{esc(m.text)}"
        await bot.send_message(ADMIN_CHAT_ID, txt, disable_web_page_preview=True)
        admin_dm_mark(m.from_user.id)
    await state.clear()
    await m.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))

@dp.message(AdminMsg.text)
async def contact_any(m: Message, state: FSMContext):
    # –∞–Ω—Ç–∏—Å–ø–∞–º
    left = admin_dm_left(m.from_user.id)
    if left > 0:
        await m.answer(f"–ê–Ω—Ç–∏—Å–ø–∞–º: –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {left} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω—É üôÇ")
        return
    Store.stats["contact_msgs"] += 1
    if ADMIN_CHAT_ID:
        head = f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç {ufmt(m)} (–º–µ–¥–∏–∞ –Ω–∏–∂–µ)"
        await bot.send_message(ADMIN_CHAT_ID, head)
        try:
            await bot.copy_message(ADMIN_CHAT_ID, from_chat_id=m.chat.id, message_id=m.message_id)
        except Exception as e:
            await bot.send_message(ADMIN_CHAT_ID, f"(–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏–∞)\n<code>{esc(str(e))}</code>")
        admin_dm_mark(m.from_user.id)
    await state.clear()
    await m.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))

# --- üéÅ –ü–æ–¥–∞—Ä–æ–∫ ---
@dp.callback_query(F.data == "go_gift")
async def cb_gift(c: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –ß–µ–∫-–ª–∏—Å—Ç PDF", callback_data="gift_pdf"),
         InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥ ‚àí20% (72—á)", callback_data="gift_promo")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu")]
    ])
    txt = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫</b>: —á–µ–∫-–ª–∏—Å—Ç PDF –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ ‚àí20% –Ω–∞ Lite (72—á)."
    await safe_edit(c, txt, kb); await c.answer()

@dp.callback_query(F.data == "gift_pdf")
async def cb_gift_pdf(c: CallbackQuery):
    uid = c.from_user.id
    pdf_path = os.path.join(os.path.dirname(__file__), "assets", "gifts", "checklist.pdf")
    caption = (
        "<b>–ß–µ–∫-–ª–∏—Å—Ç: ¬´–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–∫—É–ø–∏—Ç—Å—è –∑–∞ 48 —á–∞—Å–æ–≤¬ª</b>\n"
        "–¶–µ–ª—å ‚Ä¢ –ú–µ–Ω—é ‚Ä¢ –£–¢–ü ‚Ä¢ –ö–≤–∏–∑ ‚Ä¢ –õ–∏–¥—ã ‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç ‚Ä¢ –û—Ñ—Ñ–µ—Ä ‚Ä¢ –ö–µ–π—Å—ã ‚Ä¢ –ü–∞–º—è—Ç—å ‚Ä¢ –ü—Ä–∞–≤–∫–∏ ‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∏ ‚Ä¢ –¶–∏—Ñ—Ä—ã"
    )
    try:
        if os.path.exists(pdf_path):
            await c.message.answer_document(FSInputFile(pdf_path), caption=caption)
        else:
            await c.message.answer(caption)
        Store.gift_claimed.add(uid)
        await notify_admin(f"üéÅ PDF —á–µ–∫-–ª–∏—Å—Ç –≤—ã–¥–∞–Ω: {c.from_user.full_name} (@{c.from_user.username or '‚Äî'})")
    except Exception as e:
        await c.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF: <code>{esc(str(e))}</code>")
    await c.answer()

@dp.callback_query(F.data == "gift_promo")
async def cb_gift_promo(c: CallbackQuery):
    uid = c.from_user.id
    promo = Store.promos.get(uid) or gen_promo_for(uid)
    txt = (
        "<b>–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: </b><code>{code}</code>\n"
        "–°–∫–∏–¥–∫–∞: ‚àí20% –Ω–∞ Lite, –¥–æ {exp}\n"
        "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
    ).format(code=esc(promo["code"]), exp=esc(promo["expires_utc"]))
    await c.message.answer(txt)
    await notify_admin(f"üéü –ü—Ä–æ–º–æ–∫–æ–¥ –≤—ã–¥–∞–Ω: {c.from_user.full_name} ‚Üí {promo['code']} (–¥–æ {promo['expires_utc']})")
    Store.gift_claimed.add(uid)
    await c.answer()

# --- –ó–∞–∫–∞–∑ (–∫–æ–Ω—Ç–∞–∫—Ç) ---
@dp.callback_query(F.data == "go_order")
async def order_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Order.contact)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[
        KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True),
    ]])
    await c.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º/–ø–æ—á—Ç–∞):", reply_markup=kb)
    await c.answer()

@dp.message(Order.contact, F.contact)
async def order_contact_obj(m: Message, state: FSMContext):
    phone = sanitize_phone(m.contact.phone_number)
    await finalize_order(m, state, phone=phone)

@dp.message(Order.contact)
async def order_contact_text(m: Message, state: FSMContext):
    phone = sanitize_phone(m.text)
    await finalize_order(m, state, phone=phone, raw=m.text)

async def finalize_order(m: Message, state: FSMContext, phone: Optional[str], raw: Optional[str] = None):
    await state.clear()
    Store.stats["orders"] += 1
    clean = phone or (raw.strip() if raw else "‚Äî")
    msg = (
        "üõí –ó–∞–∫–∞–∑/–∫–æ–Ω—Ç–∞–∫—Ç\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(clean)}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞ —Å–≤—è–∑–∏.", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))
    await notify_admin(msg)

# --- Fallback —á–∞—Ç-–∫–≤–∏–∑ (—á–µ—Ä–µ–∑ ForceReply –≤ –≥—Ä—É–ø–ø–∞—Ö) ---
@dp.callback_query(F.data == "go_quiz")
async def quiz_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Quiz.niche)
    kb = force_reply_if_needed(c.message.chat.type, "–ù–∏—à–∞ –∏ –≥–æ—Ä–æ–¥")
    await safe_edit(c, "üß™ –ö–≤–∏–∑: –≤–∞—à–∞ –Ω–∏—à–∞ –∏ –≥–æ—Ä–æ–¥? (1/3)", kb=None)
    await c.message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=kb)
    await c.answer()

@dp.message(Quiz.niche)
async def quiz_niche(m: Message, state: FSMContext):
    await state.update_data(niche=(m.text or "").strip()[:200])
    await state.set_state(Quiz.goal)
    kb = force_reply_if_needed(m.chat.type, "–¶–µ–ª—å –±–æ—Ç–∞")
    if kb:
        await m.answer("–¶–µ–ª—å –±–æ—Ç–∞? (2/3) ‚Äî –∑–∞—è–≤–∫–∏, –∑–∞–ø–∏—Å—å, –æ–ø–ª–∞—Ç–∞, –æ—Ç–∑—ã–≤—ã‚Ä¶\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=kb)
    else:
        await m.answer("–¶–µ–ª—å –±–æ—Ç–∞? (2/3) ‚Äî –∑–∞—è–≤–∫–∏, –∑–∞–ø–∏—Å—å, –æ–ø–ª–∞—Ç–∞, –æ—Ç–∑—ã–≤—ã‚Ä¶")

@dp.message(Quiz.goal)
async def quiz_goal(m: Message, state: FSMContext):
    await state.update_data(goal=(m.text or "").strip()[:300])
    await state.set_state(Quiz.deadline)
    kb = force_reply_if_needed(m.chat.type, "–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞")
    if kb:
        await m.answer("–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞? (3/3) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 2‚Äì3 –¥–Ω—è / –¥–∞—Ç–∞\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=kb)
    else:
        await m.answer("–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞? (3/3) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 2‚Äì3 –¥–Ω—è / –¥–∞—Ç–∞")

@dp.message(Quiz.deadline)
async def quiz_done(m: Message, state: FSMContext):
    data = await state.update_data(deadline=(m.text or "").strip()[:100])
    await state.clear()
    Store.stats["quiz"] += 1
    msg = (
        "üÜï –ó–∞—è–≤–∫–∞ (–∫–≤–∏–∑-—á–∞—Ç)\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ù–∏—à–∞: {esc(data.get('niche'))}\n"
        f"–¶–µ–ª—å: {esc(data.get('goal'))}\n"
        f"–°—Ä–æ–∫: {esc(data.get('deadline'))}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await m.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ! ‚úÖ", reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))
    await notify_admin(msg)

# --- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ---
@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    Store.stats["webquiz"] += 1
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        data = {"raw": raw}

    comp    = (data.get("company") or "").strip()[:20000]
    task    = (data.get("task") or "").strip()[:20000]
    contact = (data.get("contact") or "").strip()[:500]

    # 1) –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ–¥–µ—Ä ‚Äî –ø–æ—á—Ç–∏ –Ω–µ–±—å—ë—Ç—Å—è
    header_ok = await send_lead_header("WebApp", m)

    # 2) –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–µ–∑–∫–æ–π)
    txt = build_lead("WebApp", m, comp, task, contact)
    delivered = await notify_admin(txt)

    # 3) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Ç–æ—á–Ω–∞—è —Ñ—Ä–∞–∑–∞
    if delivered:
        ack = "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ! ‚úÖ\n(–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –ª–∏–¥-—á–∞—Ç –∏ –∞–¥–º–∏–Ω—É)"
    else:
        ack = "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ! ‚úÖ\n" + (
            "(–∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–∂–µ –≤ –ª–∏–¥-—á–∞—Ç–µ; –ø–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É –∞–¥–º–∏–Ω–∞)" if header_ok
            else "‚ö†Ô∏è –õ–∏–¥-—á–∞—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∞–¥–º–∏–Ω —É–≤–µ–¥–æ–º–ª—ë–Ω."
        )
    await m.answer(ack, reply_markup=main_kb(is_private=(m.chat.type == "private"), is_admin=is_admin(m.from_user.id)))

# ---------- FASTAPI ----------
app = FastAPI(title="Vimly ‚Äî Client Demo Bot (WebApp)")

# HTTP-fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
@app.post("/webapp/submit")
async def webapp_submit(payload: dict = Body(...)):
    comp    = (payload.get("company") or "").strip()[:20000]
    task    = (payload.get("task") or "").strip()[:20000]
    contact = (payload.get("contact") or "").strip()[:500]
    await _send_to_leads("üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (WebApp/–±—Ä–∞—É–∑–µ—Ä)")
    txt = (
        "üß™ –ó–∞—è–≤–∫–∞ (WebApp/–±—Ä–∞—É–∑–µ—Ä)\n"
        "–û—Ç: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–±—Ä–∞—É–∑–µ—Ä)\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {esc(comp) or '‚Äî'}\n"
        f"–ó–∞–¥–∞—á–∞: {esc(task) or '‚Äî'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(contact) or '‚Äî'}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await notify_admin(txt)
    return {"ok": True}

# —Å—Ç–∞—Ç–∏–∫–∞ WebApp (html=True —Ä–∞–∑–¥–∞—ë—Ç index.html –≤ –ø–∞–ø–∫–∞—Ö)
STATIC_ROOT = os.path.join(os.path.dirname(__file__), "webapp")
if os.path.isdir(STATIC_ROOT):
    app.mount("/webapp", StaticFiles(directory=STATIC_ROOT, html=True), name="webapp")

# —è–≤–Ω—ã–π —Ä–æ—É—Ç /webapp/quiz (+fallback HTML c Telegram WebApp JS)
FALLBACK_QUIZ_HTML = """<!doctype html>
<html lang="ru"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
<title>–ö–≤–∏–∑-–∑–∞—è–≤–∫–∞</title>
<script src="https://telegram.org/js/telegram-web-app.js"></script>
<style>body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,"Helvetica Neue",Arial;margin:0;padding:20px}
.card{max-width:640px;margin:0 auto;padding:20px;border:1px solid #eee;border-radius:16px}
label{display:block;margin:12px 0 6px;font-weight:600}
input,textarea{width:100%;padding:10px;border:1px solid #ccc;border-radius:10px}
button{margin-top:16px;padding:12px 16px;border:0;border-radius:12px;cursor:pointer}
button#send{background:#111;color:#fff}</style></head><body>
<div class="card"><h3>–ö–≤–∏–∑-–∑–∞—è–≤–∫–∞</h3>
<label>–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</label><textarea id="company" rows="3" placeholder="–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?"></textarea>
<label>–ó–∞–¥–∞—á–∞</label><textarea id="task" rows="3" placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç—É?"></textarea>
<label>–ö–æ–Ω—Ç–∞–∫—Ç –≤ Telegram</label><input id="contact" placeholder="@username –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω">
<button id="send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button></div>
<script>(function(){
  const tg = window.Telegram && Telegram.WebApp ? Telegram.WebApp : null;
  const card = document.querySelector('.card');
  const btn = document.getElementById('send');
  async function send(){
    const payload = {
      company: document.getElementById('company').value||"",
      task: document.getElementById('task').value||"",
      contact: document.getElementById('contact').value||""
    };
    if (tg && tg.sendData){
      tg.sendData(JSON.stringify(payload));
      tg.close();
    } else {
      try{
        await fetch('/webapp/submit', {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify(payload)
        });
        card.innerHTML = '<h3>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ! ‚úÖ</h3><p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>';
      }catch(e){
        card.insertAdjacentHTML('beforeend','<p style="color:#b00">–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É: '+e+'</p>');
      }
    }
  }
  if(tg){ tg.expand(); tg.ready(); }
  btn.addEventListener('click', send);
})();</script>
</body></html>"""

@app.get("/webapp/quiz", response_class=HTMLResponse)
@app.get("/webapp/quiz/", response_class=HTMLResponse)
async def webapp_quiz():
    index_path = os.path.join(STATIC_ROOT, "quiz", "index.html")
    if os.path.exists(index_path):
        return FileResponse(index_path, media_type="text/html")
    return HTMLResponse(FALLBACK_QUIZ_HTML)

# —Ñ–∞–≤–∏–∫–æ–Ω
@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    hero = os.path.join(os.path.dirname(__file__), "assets", "hero.png")
    if os.path.exists(hero):
        return FileResponse(hero, media_type="image/png")
    return Response(status_code=204)

# HEAD-—Ö–µ–Ω–¥–ª–µ—Ä—ã
@app.head("/")
async def head_root(): return Response(status_code=200)
@app.head("/healthz")
async def head_healthz(): return Response(status_code=200)

@app.get("/", response_class=HTMLResponse)
async def index(): return f"<h3>{esc(BRAND_NAME)} ‚Äî {esc(BRAND_TAGLINE)}</h3>"
@app.get("/healthz", response_class=PlainTextResponse)
async def healthz(): return "ok"

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    if WEBHOOK_SECRET:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=403, detail="Invalid secret token")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

# --- Error handler ---
@dp.error()
async def on_error(event):
    exc = getattr(event, "exception", None)
    try:
        await notify_admin(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {html.escape(repr(exc))}")
    except Exception:
        pass
    logging.exception("Handler error: %s", exc)

# ---------- LIFECYCLE ----------
@app.on_event("startup")
async def on_startup():
    global BOT_USERNAME
    try:
        me = await bot.get_me()
        BOT_USERNAME = me.username or BOT_USERNAME
    except Exception as e:
        log.warning("get_me failed: %s", e)

    if MODE == "webhook":
        if BASE_URL:
            url = f"{BASE_URL}{WEBHOOK_PATH}"
            log.info("Setting webhook to: %r", url)
            try:
                await bot.set_webhook(url=url, secret_token=WEBHOOK_SECRET or None, drop_pending_updates=True)
                log.info("Webhook set OK")
            except Exception as e:
                log.error("Failed to set webhook: %s", e)
        else:
            log.warning("BASE_URL is not set; webhook not configured")
    else:
        log.info("Polling mode ‚Äî use __main__ launcher")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.session.close()
    except Exception:
        pass

# ---------- LOCAL POLLING ----------
if __name__ == "__main__":
    async def _run():
        log.info("Starting polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(_run())
