# -*- coding: utf-8 -*-
"""
Vimly ‚Äî Client Demo Bot (FastAPI + aiogram 3.7+)

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot —Å DefaultBotProperties(parse_mode=Markdown) ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è aiogram>=3.7
- Dispatcher –æ–±—ä—è–≤–ª–µ–Ω –î–û —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è BASE_URL/WEBHOOK_PATH, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "invalid webhook URL"
- –°—Ç–∞—Ä—Ç–∞–ø –Ω–µ –ø–∞–¥–∞–µ—Ç, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –≤—ã—Å—Ç–∞–≤–∏–ª—Å—è (–ø–∏—à–µ—Ç –≤ –ª–æ–≥ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç)
- –≠–Ω–¥–ø–æ–∏–Ω—Ç /healthz –¥–ª—è Render

–ó–∞–ø—É—Å–∫ –Ω–∞ Render:
Build:  pip install -r requirements.txt
Start:  uvicorn app:app --host 0.0.0.0 --port $PORT
"""

# --- imports ---
import os, logging, re, asyncio
from datetime import datetime, timezone
from typing import Optional

from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse, PlainTextResponse

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, Update,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    FSInputFile,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# --- env ---
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

def _norm_base_url(s: str) -> str:
    """–û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª—ç—à"""
    s = (s or "").strip()
    return s[:-1] if s.endswith("/") else s

def _norm_path(p: str) -> str:
    """–û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤–µ–¥—É—â–∏–π /"""
    p = (p or "").strip()
    return p if p.startswith("/") else f"/{p}"

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("Missing BOT_TOKEN env var")

ADMIN_CHAT_ID = int((os.getenv("ADMIN_CHAT_ID") or "0").strip() or "0")
BASE_URL = _norm_base_url(os.getenv("BASE_URL"))
WEBHOOK_PATH = _norm_path(os.getenv("WEBHOOK_PATH") or "/telegram/webhook/vimly")
WEBHOOK_SECRET = (os.getenv("WEBHOOK_SECRET") or "").strip()
MODE = (os.getenv("MODE") or "webhook").strip().lower()  # webhook | polling

# --- branding ---
BRAND_NAME = (os.getenv("BRAND_NAME") or "Vimly").strip()
BRAND_TAGLINE = (os.getenv("BRAND_TAGLINE") or "–ë–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç").strip()
BRAND_TG = (os.getenv("BRAND_TG") or "@Vimly_bot").strip()
BRAND_SITE = (os.getenv("BRAND_SITE") or "").strip()

# --- logging ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("vimly-demo")

# --- aiogram 3.7+ init (–î–û–õ–ñ–ù–û –ë–´–¢–¨ –î–û –•–ï–ù–î–õ–ï–†–û–í) ---
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()  # <= –æ–±—ä—è–≤–ª–µ–Ω –¥–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤

# ---- STORE (in-memory demo) ----
class Store:
    accepting = True
    stats = {"starts": 0, "quiz": 0, "orders": 0}

# ---- FSM ----
class Quiz(StatesGroup):
    niche = State()
    goal = State()
    deadline = State()

class Order(StatesGroup):
    contact = State()

# ---- UI ----
def main_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="üß≠ –ü—Ä–æ—Ü–µ—Å—Å", callback_data="go_process"),
            InlineKeyboardButton(text="üíº –ö–µ–π—Å—ã (–¥–µ–º–æ)", callback_data="go_cases"),
        ],
        [
            InlineKeyboardButton(text="üß™ –ö–≤–∏–∑-–∑–∞—è–≤–∫–∞", callback_data="go_quiz"),
            InlineKeyboardButton(text="üí∏ –ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã", callback_data="go_prices"),
        ],
        [
            InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="go_order"),
            InlineKeyboardButton(text="üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="go_contacts"),
        ],
        [
            InlineKeyboardButton(text="üìù –ë—Ä–∏—Ñ (7 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="go_brief"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="go_gift"),
        ],
        [
            InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω", callback_data="admin_open"),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=rows)

def admin_kb() -> InlineKeyboardMarkup:
    on = "üü¢" if Store.accepting else "üî¥"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{on} –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫", callback_data="admin_toggle"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton(text="üì£ –¢–µ—Å—Ç-—Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu"),
        ]
    ])

# ---- HELPERS ----
def header() -> str:
    parts = [f"*{BRAND_NAME}*", BRAND_TAGLINE]
    if BRAND_SITE:
        parts.append(BRAND_SITE)
    return "\n".join(parts)

def ufmt(m: Message) -> str:
    user = m.from_user
    tag = f"@{user.username}" if user.username else f"id={user.id}"
    return f"{user.full_name} ({tag})"

def sanitize_phone(s: str) -> Optional[str]:
    digits = re.sub(r"\D+", "", s or "")
    return digits if 7 <= len(digits) <= 15 else None

async def notify_admin(text: str):
    if not ADMIN_CHAT_ID:
        return
    try:
        await bot.send_message(ADMIN_CHAT_ID, text, disable_notification=True)
    except Exception as e:
        log.warning("notify_admin failed: %s", e)

# ---- HANDLERS ----
@dp.message(CommandStart())
async def on_start(m: Message):
    Store.stats["starts"] += 1
    welcome = (
        f"{header()}\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî *–¥–µ–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤*: –º–µ–Ω—é, –∫–µ–π—Å—ã, –∫–≤–∏–∑ –∏ –∑–∞–ø–∏—Å—å –≤ 2 –∫–ª–∏–∫–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    await m.answer(welcome, reply_markup=main_kb())

@dp.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

@dp.message(Command("admin"))
async def on_admin(m: Message):
    if m.from_user.id != ADMIN_CHAT_ID:
        return await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
    await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())

# --- Callbacks: –º–µ–Ω—é ---
@dp.callback_query(F.data == "go_menu")
async def cb_menu(c: CallbackQuery):
    await c.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_process")
async def cb_process(c: CallbackQuery):
    txt = (
        "–ö–∞–∫ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞ 1‚Äì3 –¥–Ω—è:\n"
        "1) *–°–æ–∑–≤–æ–Ω 15 –º–∏–Ω—É—Ç* ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–ª–∏\n"
        "2) *MVP* ‚Äî –º–µ–Ω—é + –∫–≤–∏–∑ + –∞–¥–º–∏–Ω-—á–∞—Ç\n"
        "3) *–ó–∞–ø—É—Å–∫* ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º Sheets/–æ–ø–ª–∞—Ç—É/–∫–∞–Ω–∞–ª\n"
        "4) *–ü–æ–¥–¥–µ—Ä–∂–∫–∞* ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–∞–≤–∫–∏, –æ—Ç—á—ë—Ç—ã\n\n"
        "–°—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∏—Å—å–º–µ–Ω–Ω–æ."
    )
    await c.message.edit_text(txt, reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_cases")
async def cb_cases(c: CallbackQuery):
    txt = (
        "–ö–µ–π—Å—ã (–¥–µ–º–æ):\n"
        "‚Ä¢ –ë–∞—Ä–±–µ—Ä—à–æ–ø ‚Äî –∑–∞–ø–∏—Å—å –∏ –æ—Ç–∑—ã–≤—ã, 2 —ç–∫—Ä–∞–Ω–∞, +26 –∑–∞—è–≤–æ–∫/–º–µ—Å\n"
        "‚Ä¢ –ü–µ–∫–∞—Ä–Ω—è ‚Äî –∫–≤–∏–∑ + –∫—É–ø–æ–Ω—ã, ~18% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤–∏–∑–∏—Ç\n"
        "‚Ä¢ –ê–≤—Ç–æ—Ä-–∫–∞–Ω–∞–ª ‚Äî –æ–ø–ª–∞—Ç–∞ ‚Üí –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n"
        "‚Ä¢ –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ‚Äî –∞—Ñ–∏—à–∞/RSVP, —Å—á–∏—Ç–∞–µ—Ç –≥–æ—Å—Ç–µ–π –∏ –≤—ã–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫\n\n"
        "–ü–æ–∫–∞–∂—É –∂–∏–≤—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ."
    )
    await c.message.edit_text(txt, reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_prices")
async def cb_prices(c: CallbackQuery):
    txt = (
        "*–ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã:*\n\n"
        "‚Ä¢ *Lite* ‚Äî 15‚Äì20k ‚ÇΩ: –º–µ–Ω—é/–∫–≤–∏–∑/–∑–∞—è–≤–∫–∏, –±–µ–∑ –ë–î –∏ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ *Standard* ‚Äî 25‚Äì45k ‚ÇΩ: + Google Sheets, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ *Pro* ‚Äî 50‚Äì90k ‚ÇΩ: + –æ–ø–ª–∞—Ç–∞, –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª, –ª–æ–≥–∏, –±—ç–∫–∞–ø—ã\n\n"
        "_–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3‚Äì10k ‚ÇΩ/–º–µ—Å_: –ø—Ä–∞–≤–∫–∏, —Ä–∞—Å—Å—ã–ª–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    )
    await c.message.edit_text(txt, reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_contacts")
async def cb_contacts(c: CallbackQuery):
    txt = (
        "*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
        f"Telegram: {BRAND_TG}\n"
        f"–°–∞–π—Ç/–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {BRAND_SITE or '‚Äî'}\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî —Å–≤—è–∂–µ–º—Å—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    await c.message.edit_text(txt, reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_brief")
async def cb_brief(c: CallbackQuery):
    brief = (
        "*–ú–∏–Ω–∏-–±—Ä–∏—Ñ (7 –≤–æ–ø—Ä–æ—Å–æ–≤):*\n"
        "1) –ù–∏—à–∞ –∏ –≥–æ—Ä–æ–¥\n"
        "2) –¶–µ–ª—å –±–æ—Ç–∞ (–∑–∞—è–≤–∫–∏/–∑–∞–ø–∏—Å—å/–æ–ø–ª–∞—Ç–∞/–æ—Ç–∑—ã–≤—ã)\n"
        "3) –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (4‚Äì6)\n"
        "4) –ß—Ç–æ —Å–ª–∞—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (–ª–∏–¥—ã/—Ñ–æ—Ç–æ/—Ñ–∞–π–ª—ã)\n"
        "5) –ù—É–∂–Ω—ã –ª–∏ Google Sheets –∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "6) –ù—É–∂–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª\n"
        "7) –°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞ –∏ –±—é–¥–∂–µ—Ç"
    )
    await c.message.edit_text(brief, reply_markup=main_kb())
    await c.answer()

@dp.callback_query(F.data == "go_gift")
async def cb_gift(c: CallbackQuery):
    path = os.path.join(os.path.dirname(__file__), "assets", "checklist-7-screens.txt")
    try:
        await bot.send_document(c.from_user.id, FSInputFile(path), caption="üéÅ –ß–µ–∫-–ª–∏—Å—Ç: 7 —ç–∫—Ä–∞–Ω–æ–≤ –¥–µ–º–æ-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç")
        await c.answer("–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫ –≤ –ª–∏—á–∫—É.")
    except Exception:
        await c.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–∫—É.", show_alert=True)

# --- –ö–≤–∏–∑ ---
@dp.callback_query(F.data == "go_quiz")
async def quiz_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Quiz.niche)
    await c.message.edit_text("üß™ –ö–≤–∏–∑: –≤–∞—à–∞ –Ω–∏—à–∞ –∏ –≥–æ—Ä–æ–¥? (1/3)")
    await c.answer()

@dp.message(Quiz.niche)
async def quiz_niche(m: Message, state: FSMContext):
    await state.update_data(niche=m.text.strip()[:120])
    await state.set_state(Quiz.goal)
    await m.answer("–¶–µ–ª—å –±–æ—Ç–∞? (2/3) ‚Äî –∑–∞—è–≤–∫–∏, –∑–∞–ø–∏—Å—å, –æ–ø–ª–∞—Ç–∞, –æ—Ç–∑—ã–≤—ã‚Ä¶")

@dp.message(Quiz.goal)
async def quiz_goal(m: Message, state: FSMContext):
    await state.update_data(goal=m.text.strip()[:180])
    await state.set_state(Quiz.deadline)
    await m.answer("–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞? (3/3) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 2‚Äì3 –¥–Ω—è / –¥–∞—Ç–∞")

@dp.message(Quiz.deadline)
async def quiz_done(m: Message, state: FSMContext):
    data = await state.update_data(deadline=m.text.strip()[:100])
    await state.clear()
    Store.stats["quiz"] += 1

    user_text = (
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ üéâ\n\n"
        f"–ù–∏—à–∞: {data.get('niche')}\n"
        f"–¶–µ–ª—å: {data.get('goal')}\n"
        f"–°—Ä–æ–∫: {data.get('deadline')}\n\n"
        "–°–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await m.answer(user_text, reply_markup=main_kb())

    at = (
        "üÜï –ó–∞—è–≤–∫–∞ (–∫–≤–∏–∑)\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ù–∏—à–∞: {data.get('niche')}\n"
        f"–¶–µ–ª—å: {data.get('goal')}\n"
        f"–°—Ä–æ–∫: {data.get('deadline')}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await notify_admin(at)

# --- –ó–∞–∫–∞–∑ ---
@dp.callback_query(F.data == "go_order")
async def order_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Order.contact)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[
        KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True),
    ]])
    await c.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º/–ø–æ—á—Ç–∞):", reply_markup=kb)
    await c.answer()

@dp.message(Order.contact, F.contact)
async def order_contact_obj(m: Message, state: FSMContext):
    phone = sanitize_phone(m.contact.phone_number)
    await finalize_order(m, state, phone=phone)

@dp.message(Order.contact)
async def order_contact_text(m: Message, state: FSMContext):
    phone = sanitize_phone(m.text)
    await finalize_order(m, state, phone=phone, raw=m.text)

async def finalize_order(m: Message, state: FSMContext, phone: Optional[str], raw: Optional[str] = None):
    await state.clear()
    Store.stats["orders"] += 1
    clean = phone or (raw.strip() if raw else "‚Äî")
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞ —Å–≤—è–∑–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
    at = (
        "üõí –ó–∞–∫–∞–∑/–∫–æ–Ω—Ç–∞–∫—Ç\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {clean}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await notify_admin(at)

# --- FastAPI app ---
app = FastAPI(title="Vimly ‚Äî Client Demo Bot")

@app.get("/", response_class=HTMLResponse)
async def index():
    return f"<h3>{BRAND_NAME} ‚Äî {BRAND_TAGLINE}</h3>"

@app.get("/healthz", response_class=PlainTextResponse)
async def healthz():
    return "ok"

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    if WEBHOOK_SECRET:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=403, detail="Invalid secret token")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

# --- lifecycle ---
@app.on_event("startup")
async def on_startup():
    if MODE == "webhook":
        if BASE_URL:
            url = f"{BASE_URL}{WEBHOOK_PATH}"
            log.info("Setting webhook to: %r", url)
            try:
                await bot.set_webhook(
                    url=url,
                    secret_token=WEBHOOK_SECRET or None,
                    drop_pending_updates=True
                )
                log.info("Webhook set OK")
            except Exception as e:
                # –ù–µ –≤–∞–ª–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥
                log.error("Failed to set webhook: %s", e)
        else:
            log.warning("BASE_URL is not set; webhook not configured")
    else:
        log.info("Polling mode ‚Äî use __main__ launcher")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.session.close()
    except Exception:
        pass

# ---- Local polling (dev) ----
if __name__ == "__main__":
    async def _run():
        log.info("Starting polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(_run())
