# -*- coding: utf-8 -*-
"""
Vimly ‚Äî Client Demo Bot (FastAPI + aiogram 3.7+)

–§–∏—à–∫–∏:
- HTML parse mode (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏ Markdown)
- /start: hero-–∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –º–µ–Ω—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
- safe_edit: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç caption/text
- WebApp-–∫–≤–∏–∑: /webapp/quiz/ (+—Ä–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏, favicon)
- –õ–∏–¥—ã: ADMIN_CHAT_ID –∏ LEADS_CHAT_ID (+ LEADS_THREAD_ID –¥–ª—è –≥—Ä—É–ø–ø —Å –¢–µ–º–∞–º–∏)
- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: /chatid, /threadid, /test_leads
"""

import os, logging, re, asyncio, json, html
from datetime import datetime, timezone
from typing import Optional

from fastapi import FastAPI, Request, HTTPException, Response
from fastapi.responses import HTMLResponse, PlainTextResponse, FileResponse
from fastapi.staticfiles import StaticFiles

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, CallbackQuery, Update,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove,
    FSInputFile,
)
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# ---------- ENV ----------
try:
    from dotenv import load_dotenv
    load_dotenv()
except Exception:
    pass

def _norm_base_url(s: str) -> str:
    s = (s or "").strip()
    return s[:-1] if s.endswith("/") else s

def _norm_path(p: str) -> str:
    p = (p or "").strip()
    return p if p.startswith("/") else f"/{p}"

BOT_TOKEN = (os.getenv("BOT_TOKEN") or "").strip()
if not BOT_TOKEN:
    raise RuntimeError("Missing BOT_TOKEN env var")

ADMIN_CHAT_ID = int((os.getenv("ADMIN_CHAT_ID") or "0").strip() or "0")

# –õ–∏–¥-—á–∞—Ç: –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID (-100...) –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞
LEADS_RAW = (os.getenv("LEADS_CHAT_ID") or "").strip()
LEADS_THREAD_ID = int((os.getenv("LEADS_THREAD_ID") or "0").strip() or "0")

BASE_URL = _norm_base_url(os.getenv("BASE_URL"))
WEBHOOK_PATH = _norm_path(os.getenv("WEBHOOK_PATH") or "/telegram/webhook/vimly")
WEBHOOK_SECRET = (os.getenv("WEBHOOK_SECRET") or "").strip()
MODE = (os.getenv("MODE") or "webhook").strip().lower()  # webhook | polling

# ---------- BRAND ----------
BRAND_NAME = (os.getenv("BRAND_NAME") or "Vimly").strip()
BRAND_TAGLINE = (os.getenv("BRAND_TAGLINE") or "–ë–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç").strip()
BRAND_TG = (os.getenv("BRAND_TG") or "@Vimly_bot").strip()
BRAND_SITE = (os.getenv("BRAND_SITE") or "").strip()

# ---------- LOG ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("vimly-webapp-demo")
log.info("Leads target (raw): %r  thread: %s", LEADS_RAW, LEADS_THREAD_ID or "‚Äî")

# ---------- AIOGRAM ----------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ---------- STORE ----------
class Store:
    accepting = True
    stats = {"starts": 0, "quiz": 0, "orders": 0, "webquiz": 0}

# ---------- FSM ----------
class Quiz(StatesGroup):
    niche = State()
    goal = State()
    deadline = State()

class Order(StatesGroup):
    contact = State()

# ---------- HELPERS ----------
def esc(s: Optional[str]) -> str:
    return html.escape(s or "", quote=False)

def header() -> str:
    parts = [f"<b>{esc(BRAND_NAME)}</b>", esc(BRAND_TAGLINE)]
    if BRAND_SITE:
        parts.append(esc(BRAND_SITE))
    return "\n".join(parts)

def ufmt(m: Message) -> str:
    user = m.from_user
    tag = f"@{user.username}" if user.username else f"id={user.id}"
    return esc(f"{user.full_name} ({tag})")

def parse_leads_target(s: str):
    s = (s or "").strip()
    if not s:
        return None
    if s.startswith("@"):
        return s  # username –∫–∞–Ω–∞–ª–∞
    try:
        return int(s)  # —á–∏—Å–ª–æ–≤–æ–π id –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ (-100‚Ä¶)
    except ValueError:
        return None

async def notify_admin(text: str):
    # –õ–∏—á–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(ADMIN_CHAT_ID, text, disable_notification=True)
        except Exception as e:
            log.warning("notify_admin failed: %s", e)
    # –õ–∏–¥-—á–∞—Ç/–∫–∞–Ω–∞–ª
    target = parse_leads_target(LEADS_RAW)
    if target:
        try:
            kwargs = {}
            if LEADS_THREAD_ID:
                kwargs["message_thread_id"] = LEADS_THREAD_ID
            await bot.send_message(target, text, **kwargs)
            log.info("Lead routed to %r (thread=%s)", LEADS_RAW, LEADS_THREAD_ID or "‚Äî")
        except Exception as e:
            log.warning("notify_leads failed: %s", e)

async def safe_edit(c: CallbackQuery, html_text: str, kb: Optional[InlineKeyboardMarkup] = None):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption/text –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ."""
    kb = kb or main_kb()
    m = c.message
    try:
        if getattr(m, "content_type", None) in {"photo","video","animation","document","audio","voice","video_note"}:
            await m.edit_caption(caption=html_text, reply_markup=kb)
        else:
            await m.edit_text(html_text, reply_markup=kb)
    except TelegramBadRequest:
        await m.answer(html_text, reply_markup=kb)

def sanitize_phone(s: str) -> Optional[str]:
    digits = re.sub(r"\D+", "", s or "")
    return digits if 7 <= len(digits) <= 15 else None

# ---------- UI ----------
def main_kb() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(text="üß≠ –ü—Ä–æ—Ü–µ—Å—Å", callback_data="go_process"),
            InlineKeyboardButton(text="üíº –ö–µ–π—Å—ã (–¥–µ–º–æ)", callback_data="go_cases"),
        ],
        [
            InlineKeyboardButton(text="üß™ –ö–≤–∏–∑-–∑–∞—è–≤–∫–∞", callback_data="go_quiz"),
            InlineKeyboardButton(text="üí∏ –ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã", callback_data="go_prices"),
        ],
        [
            InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="go_order"),
            InlineKeyboardButton(text="üì¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="go_contacts"),
        ],
        [
            InlineKeyboardButton(text="üìù –ë—Ä–∏—Ñ (7 –≤–æ–ø—Ä–æ—Å–æ–≤)", callback_data="go_brief"),
            InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="go_gift"),
        ],
    ]
    if BASE_URL:
        rows.append([InlineKeyboardButton(text="üß™ WebApp-–∫–≤–∏–∑", web_app=WebAppInfo(url=f"{BASE_URL}/webapp/quiz/"))])
    else:
        rows.append([InlineKeyboardButton(text="üß™ WebApp-–∫–≤–∏–∑ (—Å–∫–æ—Ä–æ)", callback_data="go_webapp_na")])
    rows.append([InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω", callback_data="admin_open")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def admin_kb() -> InlineKeyboardMarkup:
    on = "üü¢" if Store.accepting else "üî¥"
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{on} –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫", callback_data="admin_toggle"),
            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        ],
        [
            InlineKeyboardButton(text="üì£ –¢–µ—Å—Ç-—Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data="go_menu"),
        ]
    ])

# ---------- HANDLERS ----------
@dp.message(CommandStart())
async def on_start(m: Message):
    Store.stats["starts"] += 1
    hero = os.path.join(os.path.dirname(__file__), "assets", "hero.png")
    try:
        await m.answer_photo(FSInputFile(hero), caption=header())
    except Exception:
        pass
    welcome = (
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî <b>–¥–µ–º–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤</b>: –º–µ–Ω—é, –∫–µ–π—Å—ã, –∫–≤–∏–∑ –∏ –∑–∞–ø–∏—Å—å –≤ 2 –∫–ª–∏–∫–∞.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
    )
    await m.answer(welcome, reply_markup=main_kb())

@dp.message(Command("menu"))
async def on_menu(m: Message):
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())

@dp.message(Command("admin"))
async def on_admin(m: Message):
    if m.from_user.id != ADMIN_CHAT_ID:
        return await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
    await m.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())

@dp.message(Command("chatid"))
async def cmd_chatid(m: Message):
    await m.answer(f"chat_id: <code>{m.chat.id}</code>")

@dp.message(Command("threadid"))
async def cmd_threadid(m: Message):
    tid = getattr(m, "message_thread_id", None)
    await m.answer(f"thread_id: <code>{tid}</code>")

@dp.channel_post(Command("chatid"))
async def channel_chatid(m: Message):
    await m.answer(f"chat_id: <code>{m.chat.id}</code>")

@dp.channel_post(Command("threadid"))
async def channel_threadid(m: Message):
    tid = getattr(m, "message_thread_id", None)
    await m.answer(f"thread_id: <code>{tid}</code>")

@dp.message(Command("test_leads"))
async def test_leads_cmd(m: Message):
    if m.from_user.id != ADMIN_CHAT_ID:
        return
    target = parse_leads_target(LEADS_RAW)
    if not target:
        return await m.answer("LEADS_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
    try:
        kwargs = {}
        if LEADS_THREAD_ID:
            kwargs["message_thread_id"] = LEADS_THREAD_ID
        await bot.send_message(target, "üîî –¢–µ—Å—Ç –≤ —á–∞—Ç –ª–∏–¥–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", **kwargs)
        await m.answer(f"OK ‚Üí {LEADS_RAW!r} (thread={LEADS_THREAD_ID or '‚Äî'})")
    except Exception as e:
        await m.answer(f"–ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å –≤ {LEADS_RAW!r}:\n<code>{e}</code>")

@dp.callback_query(F.data == "go_webapp_na")
async def cb_webapp_na(c: CallbackQuery):
    await c.answer("–í–µ–±-—Ñ–æ—Ä–º–∞ –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ BASE_URL.", show_alert=True)

@dp.callback_query(F.data == "go_menu")
async def cb_menu(c: CallbackQuery):
    await safe_edit(c, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", kb=main_kb()); await c.answer()

@dp.callback_query(F.data == "go_process")
async def cb_process(c: CallbackQuery):
    txt = (
        "–ö–∞–∫ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞ 1‚Äì3 –¥–Ω—è:\n"
        "1) <b>–°–æ–∑–≤–æ–Ω 15 –º–∏–Ω—É—Ç</b> ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–ª–∏\n"
        "2) <b>MVP</b> ‚Äî –º–µ–Ω—é + –∫–≤–∏–∑ + –∞–¥–º–∏–Ω-—á–∞—Ç\n"
        "3) <b>–ó–∞–ø—É—Å–∫</b> ‚Äî –ø–æ–¥–∫–ª—é—á–∞–µ–º Sheets/–æ–ø–ª–∞—Ç—É/–∫–∞–Ω–∞–ª\n"
        "4) <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∏, –ø—Ä–∞–≤–∫–∏, –æ—Ç—á—ë—Ç—ã\n\n"
        "–°—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–∏—Å—å–º–µ–Ω–Ω–æ."
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_cases")
async def cb_cases(c: CallbackQuery):
    txt = (
        "–ö–µ–π—Å—ã (–¥–µ–º–æ):\n"
        "‚Ä¢ –ë–∞—Ä–±–µ—Ä—à–æ–ø ‚Äî –∑–∞–ø–∏—Å—å –∏ –æ—Ç–∑—ã–≤—ã, 2 —ç–∫—Ä–∞–Ω–∞, +26 –∑–∞—è–≤–æ–∫/–º–µ—Å\n"
        "‚Ä¢ –ü–µ–∫–∞—Ä–Ω—è ‚Äî –∫–≤–∏–∑ + –∫—É–ø–æ–Ω—ã, ~18% –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≤–∏–∑–∏—Ç\n"
        "‚Ä¢ –ê–≤—Ç–æ—Ä-–∫–∞–Ω–∞–ª ‚Äî –æ–ø–ª–∞—Ç–∞ ‚Üí –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç\n"
        "‚Ä¢ –ö–æ–≤–æ—Ä–∫–∏–Ω–≥ ‚Äî –∞—Ñ–∏—à–∞/RSVP, —Å—á–∏—Ç–∞–µ—Ç –≥–æ—Å—Ç–µ–π –∏ –≤—ã–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫\n\n"
        "–ü–æ–∫–∞–∂—É –∂–∏–≤—ã–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ã –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ."
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_prices")
async def cb_prices(c: CallbackQuery):
    txt = (
        "<b>–ü–∞–∫–µ—Ç—ã –∏ —Ü–µ–Ω—ã:</b>\n\n"
        "‚Ä¢ <b>Lite</b> ‚Äî 15‚Äì20k ‚ÇΩ: –º–µ–Ω—é/–∫–≤–∏–∑/–∑–∞—è–≤–∫–∏, –±–µ–∑ –ë–î –∏ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ <b>Standard</b> ‚Äî 25‚Äì45k ‚ÇΩ: + Google Sheets, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ <b>Pro</b> ‚Äî 50‚Äì90k ‚ÇΩ: + –æ–ø–ª–∞—Ç–∞, –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª, –ª–æ–≥–∏, –±—ç–∫–∞–ø—ã\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3‚Äì10k ‚ÇΩ/–º–µ—Å</i>: –ø—Ä–∞–≤–∫–∏, —Ä–∞—Å—Å—ã–ª–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_contacts")
async def cb_contacts(c: CallbackQuery):
    txt = (
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        f"Telegram: {esc(BRAND_TG)}\n"
        f"–°–∞–π—Ç/–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {esc(BRAND_SITE) or '‚Äî'}\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω ‚Äî —Å–≤—è–∂–µ–º—Å—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
    )
    await safe_edit(c, txt); await c.answer()

@dp.callback_query(F.data == "go_brief")
async def cb_brief(c: CallbackQuery):
    brief = (
        "<b>–ú–∏–Ω–∏-–±—Ä–∏—Ñ (7 –≤–æ–ø—Ä–æ—Å–æ–≤):</b>\n"
        "1) –ù–∏—à–∞ –∏ –≥–æ—Ä–æ–¥\n"
        "2) –¶–µ–ª—å –±–æ—Ç–∞ (–∑–∞—è–≤–∫–∏/–∑–∞–ø–∏—Å—å/–æ–ø–ª–∞—Ç–∞/–æ—Ç–∑—ã–≤—ã)\n"
        "3) –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (4‚Äì6)\n"
        "4) –ß—Ç–æ —Å–ª–∞—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç (–ª–∏–¥—ã/—Ñ–æ—Ç–æ/—Ñ–∞–π–ª—ã)\n"
        "5) –ù—É–∂–Ω—ã –ª–∏ Google Sheets –∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "6) –ù—É–∂–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª\n"
        "7) –°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞ –∏ –±—é–¥–∂–µ—Ç"
    )
    await safe_edit(c, brief); await c.answer()

# --- –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–≤–∏–∑ –≤ —á–∞—Ç–µ ---
@dp.callback_query(F.data == "go_quiz")
async def quiz_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Quiz.niche)
    await safe_edit(c, "üß™ –ö–≤–∏–∑: –≤–∞—à–∞ –Ω–∏—à–∞ –∏ –≥–æ—Ä–æ–¥? (1/3)", kb=None)
    await c.answer()

@dp.message(Quiz.niche)
async def quiz_niche(m: Message, state: FSMContext):
    await state.update_data(niche=(m.text or "").strip()[:200])
    await state.set_state(Quiz.goal)
    await m.answer("–¶–µ–ª—å –±–æ—Ç–∞? (2/3) ‚Äî –∑–∞—è–≤–∫–∏, –∑–∞–ø–∏—Å—å, –æ–ø–ª–∞—Ç–∞, –æ—Ç–∑—ã–≤—ã‚Ä¶")

@dp.message(Quiz.goal)
async def quiz_goal(m: Message, state: FSMContext):
    await state.update_data(goal=(m.text or "").strip()[:300])
    await state.set_state(Quiz.deadline)
    await m.answer("–°—Ä–æ–∫ –∑–∞–ø—É—Å–∫–∞? (3/3) ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 2‚Äì3 –¥–Ω—è / –¥–∞—Ç–∞")

@dp.message(Quiz.deadline)
async def quiz_done(m: Message, state: FSMContext):
    data = await state.update_data(deadline=(m.text or "").strip()[:100])
    await state.clear()
    Store.stats["quiz"] += 1
    await m.answer((
        "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ üéâ\n\n"
        f"–ù–∏—à–∞: {esc(data.get('niche'))}\n"
        f"–¶–µ–ª—å: {esc(data.get('goal'))}\n"
        f"–°—Ä–æ–∫: {esc(data.get('deadline'))}\n\n"
        "–°–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    ), reply_markup=main_kb())
    await notify_admin((
        "üÜï –ó–∞—è–≤–∫–∞ (–∫–≤–∏–∑-—á–∞—Ç)\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ù–∏—à–∞: {esc(data.get('niche'))}\n"
        f"–¶–µ–ª—å: {esc(data.get('goal'))}\n"
        f"–°—Ä–æ–∫: {esc(data.get('deadline'))}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    ))

# --- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ---
@dp.message(F.web_app_data)
async def on_webapp_data(m: Message):
    Store.stats["webquiz"] += 1
    raw = m.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        data = {"raw": raw}
    comp = (data.get("company") or "").strip()[:2000]
    task = (data.get("task") or "").strip()[:2000]
    contact = (data.get("contact") or "").strip()[:200]

    txt = (
        "üß™ –ó–∞—è–≤–∫–∞ (WebApp)\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {esc(comp) or '‚Äî'}\n"
        f"–ó–∞–¥–∞—á–∞: {esc(task) or '‚Äî'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(contact) or '‚Äî'}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    )
    await notify_admin(txt)
    await m.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã –Ω–∞ —Å–≤—è–∑–∏.", reply_markup=main_kb())

# --- –ó–∞–∫–∞–∑ (–∫–æ–Ω—Ç–∞–∫—Ç) ---
@dp.callback_query(F.data == "go_order")
async def order_start(c: CallbackQuery, state: FSMContext):
    if not Store.accepting:
        return await c.answer("–ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
    await state.set_state(Order.contact)
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=[[
        KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True),
    ]])
    await c.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º/–ø–æ—á—Ç–∞):", reply_markup=kb)
    await c.answer()

@dp.message(Order.contact, F.contact)
async def order_contact_obj(m: Message, state: FSMContext):
    phone = sanitize_phone(m.contact.phone_number)
    await finalize_order(m, state, phone=phone)

@dp.message(Order.contact)
async def order_contact_text(m: Message, state: FSMContext):
    phone = sanitize_phone(m.text)
    await finalize_order(m, state, phone=phone, raw=m.text)

async def finalize_order(m: Message, state: FSMContext, phone: Optional[str], raw: Optional[str] = None):
    await state.clear()
    Store.stats["orders"] += 1
    clean = phone or (raw.strip() if raw else "‚Äî")
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã –Ω–∞ —Å–≤—è–∑–∏. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb())
    await notify_admin((
        "üõí –ó–∞–∫–∞–∑/–∫–æ–Ω—Ç–∞–∫—Ç\n"
        f"–û—Ç: {ufmt(m)}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {esc(clean)}\n"
        f"UTC: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M')}"
    ))

# --- Error handler (aiogram 3.7+ –æ–∂–∏–¥–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç event) ---
@dp.error()
async def on_error(event):
    exc = getattr(event, "exception", None)
    try:
        await notify_admin(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {html.escape(repr(exc))}")
    except Exception:
        pass
    logging.exception("Handler error: %s", exc)

# ---------- FASTAPI ----------
app = FastAPI(title="Vimly ‚Äî Client Demo Bot (WebApp)")

# —Å—Ç–∞—Ç–∏–∫–∞ WebApp (html=True —Ä–∞–∑–¥–∞—ë—Ç index.html –≤ –ø–∞–ø–∫–∞—Ö)
STATIC_ROOT = os.path.join(os.path.dirname(__file__), "webapp")
if os.path.isdir(STATIC_ROOT):
    app.mount("/webapp", StaticFiles(directory=STATIC_ROOT, html=True), name="webapp")

# —è–≤–Ω—ã–π —Ä–æ—É—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ /)
@app.get("/webapp/quiz", response_class=HTMLResponse)
@app.get("/webapp/quiz/", response_class=HTMLResponse)
async def webapp_quiz():
    index_path = os.path.join(STATIC_ROOT, "quiz", "index.html")
    if os.path.exists(index_path):
        return FileResponse(index_path, media_type="text/html")
    raise HTTPException(status_code=404, detail="webapp/quiz not found")

# —Ñ–∞–≤–∏–∫–æ–Ω (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ 404)
@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    hero = os.path.join(os.path.dirname(__file__), "assets", "hero.png")
    if os.path.exists(hero):
        return FileResponse(hero, media_type="image/png")
    return Response(status_code=204)

# HEAD-—Ö–µ–Ω–¥–ª–µ—Ä—ã (—É–±–∏—Ä–∞—é—Ç 405 –æ—Ç –ø–∏–Ω–≥–æ–≤ Render)
@app.head("/")
async def head_root():
    return Response(status_code=200)

@app.head("/healthz")
async def head_healthz():
    return Response(status_code=200)

@app.get("/", response_class=HTMLResponse)
async def index():
    return f"<h3>{esc(BRAND_NAME)} ‚Äî {esc(BRAND_TAGLINE)}</h3>"

@app.get("/healthz", response_class=PlainTextResponse)
async def healthz():
    return "ok"

@app.post(WEBHOOK_PATH)
async def webhook(request: Request):
    if WEBHOOK_SECRET:
        secret = request.headers.get("X-Telegram-Bot-Api-Secret-Token")
        if secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=403, detail="Invalid secret token")
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

# ---------- LIFECYCLE ----------
@app.on_event("startup")
async def on_startup():
    if MODE == "webhook":
        if BASE_URL:
            url = f"{BASE_URL}{WEBHOOK_PATH}"
            log.info("Setting webhook to: %r", url)
            try:
                await bot.set_webhook(url=url, secret_token=WEBHOOK_SECRET or None, drop_pending_updates=True)
                log.info("Webhook set OK")
            except Exception as e:
                log.error("Failed to set webhook: %s", e)
        else:
            log.warning("BASE_URL is not set; webhook not configured")
    else:
        log.info("Polling mode ‚Äî use __main__ launcher")

@app.on_event("shutdown")
async def on_shutdown():
    try:
        await bot.session.close()
    except Exception:
        pass

# ---------- LOCAL POLLING ----------
if __name__ == "__main__":
    async def _run():
        log.info("Starting polling...")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    asyncio.run(_run())
